[build-system]
requires = ["setuptools>=69.0.2", "wheel>=0.42.0"]
build-backend = "setuptools.build_meta"

[project]
name = "dependency-risk-profiler"
dynamic = ["version"]
description = "A tool to evaluate the health and risk of a project's dependencies beyond vulnerability scanning"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "William Zujkowski", email = "williamzujkowski@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Security",
]
dependencies = [
    "requests>=2.32.2",  # Fixed CVE-2024-35195
    "packaging>=23.2",
    "colorama>=0.4.6;platform_system=='Windows'",
    "pyyaml>=6.0.1",
    "matplotlib>=3.7.0",  # For potential visualization
    "networkx>=2.8.8",    # For dependency graph analysis
    "cryptography>=42.0.0",  # For secure code signing, Fixed CVE-2023-50782 & others
    "urllib3>=2.2.2",     # Fixed CVE-2024-37891
    "jinja2>=3.1.5",      # Fixed CVE-2024-56201
    "certifi>=2024.7.4",  # Fixed CVE-2024-39689
    "werkzeug>=3.0.6",    # Fixed CVE-2024-49766, CVE-2024-49767
    "tomli>=2.0.1",  # TOML parsing (make available for all Python versions for testing)
    "pygments>=2.16.1",   # Fixed CVE-2023-41337
    "pillow>=10.2.0",     # Fixed CVE-2023-50447, CVE-2024-35219, etc.
    "typer>=0.9.0",       # CLI framework for better user experience
    "rich>=13.5.0",       # For rich terminal output and progress bars
    "aiohttp>=3.8.6",     # For async HTTP requests
    "httpx>=0.24.1",      # Modern HTTP client with sync and async support
    "pipdeptree>=2.13.0", # For enhanced Python transitive dependency analysis
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.2.0",
    "pytest-benchmark>=4.0.0",  # For performance benchmark tests
    "pytest-asyncio>=0.21.1",   # For testing async code
    "black>=24.4.0",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.9.0",
    "responses>=0.25.0",        # For HTTP mocking in tests
    "aioresponses>=0.7.4",      # For mocking async HTTP requests
    "tomli>=2.0.1",  # TOML parsing/writing in tests (make available for all Python versions)
    "tomli-w>=1.0.0",           # For TOML writing in tests
    "pre-commit>=3.5.0",        # For pre-commit hooks
]

benchmark = [
    "numpy>=1.24.0",           # For benchmark tests and percentile calculations
]

visualization = [
    "graphviz>=0.20.1",        # For dependency graph visualization
    "python-igraph>=0.10.4",   # Alternative graph visualization
]

[project.urls]
Homepage = "https://github.com/williamzujkowski/dependency-risk-profiler"
Issues = "https://github.com/williamzujkowski/dependency-risk-profiler/issues"

[project.scripts]
dependency-risk-profiler = "dependency_risk_profiler.cli.typer_cli:main"
dependency-risk-profiler-legacy = "dependency_risk_profiler.cli.main:main"

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = [
    "tests/",
    "venv/",
    "build/",
    "dist/",
    "setup.py"
]

# Temporarily ignore errors in certain modules
[[tool.mypy.overrides]]
module = "enum"
strict_optional = false

[[tool.mypy.overrides]]
module = "dataclasses"
strict_optional = false

# Ignore import errors for third-party libraries
[[tool.mypy.overrides]]
module = "tomli.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "yaml.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "requests.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "typer.*"
ignore_missing_imports = true

# Ignore specific modules with too many type issues
[[tool.mypy.overrides]]
module = "dependency_risk_profiler.config"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.vulnerabilities.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.transitive.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.supply_chain.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.scorecard.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.scoring.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.parsers.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.analyzers.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.community.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.cli.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "dependency_risk_profiler.secure_release.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["testing/unit", "testing/integration"]
python_files = "test_*.py"
python_functions = "test_*"
markers = [
    "benchmark: marks tests as performance benchmarks",
    "asyncio: mark test to run using asyncio",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov=src --cov-report=xml --cov-report=html"
cov_fail_under = 90

[tool.setuptools]
packages = {find = {where = ["src"]}}
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "dependency_risk_profiler.__version__"}

[tool.ruff]
target-version = "py39"
line-length = 88
exclude = ["tests/*", "**/tests/*"]
select = ["E", "F", "B", "I"]
ignore = ["E203"] 

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "venv",
    ".venv",
    ".tox",
    ".mypy_cache",
    ".pytest_cache",
    ".eggs",
    "*.egg",
    # Exclude test files with intentional issues
    "tests/integration/test_security_policy.py",
    "tests/integration/test_dependency_update.py",
    "tests/integration/test_phase2.py",
    "tests/test_comprehensive_vulnerability_aggregator.py",
    "tests/test_comprehensive_risk_scorer.py",
    "tests/test_vulnerability_aggregator_with_cache.py"
]
per-file-ignores = [
    # Allow assert statements in tests
    "tests/*:S101,F401,W293,E501,E302,E303,F811,F841,W292",
    # Allow import * in __init__.py files
    "__init__.py:F401,F403"
]