"""Integration tests for vulnerability aggregator with disk caching."""

import os
import tempfile
from pathlib import Path
from unittest import mock

import pytest
import responses

from dependency_risk_profiler.models import DependencyMetadata
from dependency_risk_profiler.vulnerabilities.aggregator import (
    USE_DISK_CACHE,
    OSVSource,
    aggregate_vulnerability_data,
    get_cached_data,
)
from dependency_risk_profiler.vulnerabilities.cache import VulnerabilityCache


@pytest.fixture
def mock_env_vars():
    """Fixture to set environment variables for testing."""
    # Store original values
    original_cache_disable = os.environ.get("DEPENDENCY_RISK_DISABLE_CACHE")
    original_cache_expiry = os.environ.get("DEPENDENCY_RISK_CACHE_EXPIRY")

    # Set test values
    os.environ["DEPENDENCY_RISK_DISABLE_CACHE"] = "0"
    os.environ["DEPENDENCY_RISK_CACHE_EXPIRY"] = "3600"

    yield

    # Restore original values
    if original_cache_disable is None:
        del os.environ["DEPENDENCY_RISK_DISABLE_CACHE"]
    else:
        os.environ["DEPENDENCY_RISK_DISABLE_CACHE"] = original_cache_disable

    if original_cache_expiry is None:
        del os.environ["DEPENDENCY_RISK_CACHE_EXPIRY"]
    else:
        os.environ["DEPENDENCY_RISK_CACHE_EXPIRY"] = original_cache_expiry


@pytest.fixture
def temp_cache_dir():
    """Create a temporary cache directory for testing."""
    with tempfile.TemporaryDirectory() as temp_dir:
        yield Path(temp_dir)


@pytest.fixture
def test_cache(temp_cache_dir):
    """Create a VulnerabilityCache instance for testing."""
    # Create a new cache instance
    cache_instance = VulnerabilityCache(cache_dir=temp_cache_dir)

    # Monkey patch the default cache instance for testing
    from dependency_risk_profiler.vulnerabilities import cache

    original_cache = cache.default_cache
    cache.default_cache = cache_instance

    yield cache_instance

    # Restore original cache
    cache.default_cache = original_cache


@pytest.fixture
def sample_vulnerability_data():
    """Sample vulnerability data for testing."""
    return [
        {
            "id": "CVE-2021-12345",
            "source": "OSV",
            "published": "2021-01-01T00:00:00Z",
            "summary": "Test vulnerability",
            "details": "This is a test vulnerability",
            "severity": "HIGH",
            "cvss_score": 7.5,
            "fixed_versions": ["1.2.3"],
            "references": ["https://example.com/vuln"],
        }
    ]


@pytest.fixture
def sample_dependency():
    """Sample dependency metadata for testing."""
    return DependencyMetadata(
        name="test-package",
        installed_version="1.0.0",
        repository_url="https://github.com/test/test-package",
    )


@pytest.fixture(autouse=True)
def reset_responses():
    """Reset responses after each test."""
    responses.reset()


def test_basic_cache_operations(
    mock_env_vars, test_cache, sample_dependency, sample_vulnerability_data
):
    """Test basic cache operations like set, get, and clear."""
    # Make sure the cache is empty to start
    test_cache.clear()

    # Test that an empty cache returns None
    assert test_cache.get(sample_dependency.name, "python") is None

    # Test setting and retrieving cache data
    test_cache.set(sample_dependency.name, "python", sample_vulnerability_data)

    # Retrieve data and verify
    cached_data = test_cache.get(sample_dependency.name, "python")
    assert cached_data is not None, "No data retrieved from cache"
    vulns, timestamp = cached_data
    assert vulns, "Empty data retrieved from cache"
    assert any(v["id"] == "CVE-2021-12345" for v in vulns)

    # Test clearing the cache
    test_cache.clear()
    assert test_cache.get(sample_dependency.name, "python") is None

    # Verify cache files were created when we set data
    test_cache.set(sample_dependency.name, "python", sample_vulnerability_data)
    cache_files = list(test_cache.cache_dir.glob("*.json"))
    assert len(cache_files) > 0


def test_cache_with_environment_variable(
    mock_env_vars, test_cache, sample_dependency, sample_vulnerability_data
):
    """Test that the environment variable is checked by the aggregator."""
    from dependency_risk_profiler.vulnerabilities.aggregator import get_cached_data

    # Setup: create a cache entry
    test_cache.set(sample_dependency.name, "python", sample_vulnerability_data)

    # Test 1: With default environment (cache enabled)
    # Make sure both cache settings are consistent
    with mock.patch.dict(
        os.environ, {"DEPENDENCY_RISK_DISABLE_CACHE": "0", "USE_DISK_CACHE": "1"}
    ):
        # Force the module to reload to get updated environment variables
        import importlib

        import dependency_risk_profiler.vulnerabilities.aggregator

        importlib.reload(dependency_risk_profiler.vulnerabilities.aggregator)
        from dependency_risk_profiler.vulnerabilities.aggregator import get_cached_data

        # Should return data from cache
        result = get_cached_data(sample_dependency.name, "python")
        assert (
            result is not None
        ), "get_cached_data should return data when DEPENDENCY_RISK_DISABLE_CACHE=0"

    # Test 2: With cache disabled via environment variable
    with mock.patch.dict(os.environ, {"DEPENDENCY_RISK_DISABLE_CACHE": "1"}):
        # Force the module to reload to get updated environment variables
        import importlib

        import dependency_risk_profiler.vulnerabilities.aggregator

        importlib.reload(dependency_risk_profiler.vulnerabilities.aggregator)
        from dependency_risk_profiler.vulnerabilities.aggregator import get_cached_data

        # Should not return data from cache
        result = get_cached_data(sample_dependency.name, "python")
        assert (
            result is None
        ), "get_cached_data should not return data when DEPENDENCY_RISK_DISABLE_CACHE=1"
