"""Tests for the vulnerability cache module."""

import json
import os
import tempfile
import time
from pathlib import Path

import pytest

from src.dependency_risk_profiler.vulnerabilities.cache import VulnerabilityCache


class TestVulnerabilityCache:
    """Test cases for the VulnerabilityCache class."""

    @pytest.fixture
    def temp_cache_dir(self):
        """Create a temporary cache directory for testing."""
        with tempfile.TemporaryDirectory() as temp_dir:
            yield Path(temp_dir)

    @pytest.fixture
    def cache(self, temp_cache_dir):
        """Create a VulnerabilityCache instance for testing."""
        return VulnerabilityCache(cache_dir=temp_cache_dir)

    def test_ensure_cache_dir(self, temp_cache_dir):
        """Test that the cache directory is created."""
        # Remove the directory created by the fixture
        temp_cache_dir.rmdir()
        assert not temp_cache_dir.exists()

        # Creating a cache should create the directory
        cache = VulnerabilityCache(cache_dir=temp_cache_dir)
        assert temp_cache_dir.exists()

    def test_get_cache_path(self, cache, temp_cache_dir):
        """Test that cache paths are correctly generated."""
        path = cache._get_cache_path("test-package", "python")
        assert path == temp_cache_dir / "python_test-package.json"

        # Test with special characters
        path = cache._get_cache_path("@user/package", "nodejs")
        assert path == temp_cache_dir / "nodejs_@user__package.json"

    def test_set_and_get(self, cache):
        """Test setting and getting cache data."""
        test_data = [{"id": "CVE-1234", "source": "test"}]

        # Set cache data
        result = cache.set("test-package", "python", test_data)
        assert result is True

        # Get cache data
        cached_data = cache.get("test-package", "python")
        assert cached_data is not None

        data, timestamp = cached_data
        assert data == test_data
        assert isinstance(timestamp, float)
        assert timestamp <= time.time()

    def test_cache_expiry(self, cache):
        """Test that expired cache entries are not returned."""
        test_data = [{"id": "CVE-1234", "source": "test"}]

        # Set cache data with very short expiry
        cache.expiry = 0.1  # 100ms
        cache.set("test-package", "python", test_data)

        # Data should be available immediately
        cached_data = cache.get("test-package", "python")
        assert cached_data is not None

        # Wait for expiry
        time.sleep(0.2)

        # Data should be expired now
        cached_data = cache.get("test-package", "python")
        assert cached_data is None

    def test_clear_specific(self, cache):
        """Test clearing a specific cache entry."""
        # Add two entries
        cache.set("package1", "python", [{"id": "CVE-1"}])
        cache.set("package2", "nodejs", [{"id": "CVE-2"}])

        # Clear one entry
        cleared = cache.clear("package1", "python")
        assert cleared == 1

        # Only one entry should remain
        assert cache.get("package1", "python") is None
        assert cache.get("package2", "nodejs") is not None

    def test_clear_ecosystem(self, cache):
        """Test clearing all entries for an ecosystem."""
        # Add entries for different ecosystems
        cache.set("package1", "python", [{"id": "CVE-1"}])
        cache.set("package2", "python", [{"id": "CVE-2"}])
        cache.set("package3", "nodejs", [{"id": "CVE-3"}])

        # Clear one ecosystem
        cleared = cache.clear(ecosystem="python")
        assert cleared == 2

        # Python entries should be gone, nodejs should remain
        assert cache.get("package1", "python") is None
        assert cache.get("package2", "python") is None
        assert cache.get("package3", "nodejs") is not None

    def test_clear_all(self, cache):
        """Test clearing all cache entries."""
        # Add entries
        cache.set("package1", "python", [{"id": "CVE-1"}])
        cache.set("package2", "nodejs", [{"id": "CVE-2"}])

        # Clear all
        cleared = cache.clear()
        assert cleared == 2

        # All entries should be gone
        assert cache.get("package1", "python") is None
        assert cache.get("package2", "nodejs") is None

    def test_get_stats(self, cache):
        """Test getting cache statistics."""
        # Empty cache
        stats = cache.get_stats()
        assert stats["entry_count"] == 0
        assert stats["total_size_bytes"] == 0

        # Add some entries
        cache.set("package1", "python", [{"id": "CVE-1"}])
        cache.set("package2", "nodejs", [{"id": "CVE-2"}])

        # Get stats again
        stats = cache.get_stats()
        assert stats["entry_count"] == 2
        assert stats["total_size_bytes"] > 0
        assert "python" in stats["ecosystems"]
        assert "nodejs" in stats["ecosystems"]

    def test_malformed_cache_file(self, cache, temp_cache_dir):
        """Test behavior with malformed cache files."""
        # Create a malformed cache file
        cache_path = temp_cache_dir / "python_malformed.json"
        with open(cache_path, "w") as f:
            f.write("this is not json")

        # Trying to read it should return None
        assert cache.get("malformed", "python") is None

        # Create a JSON file without required fields
        cache_path = temp_cache_dir / "python_incomplete.json"
        with open(cache_path, "w") as f:
            json.dump({"incomplete": True}, f)

        # Trying to read it should return None
        assert cache.get("incomplete", "python") is None
